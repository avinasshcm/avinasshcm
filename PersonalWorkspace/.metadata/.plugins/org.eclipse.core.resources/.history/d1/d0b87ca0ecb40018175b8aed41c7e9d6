package main;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

import logger.utils.LogHelper;

import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import pojo.FieldsDescriptor;
import utils.MutualFundUtils;
import constants.ReadConstants;
import excel.utils.ExcelHelper;
import file.utils.FileUtilsHelper;

public class ReadMFNAV {

    private static final String AMFIINDIA = ReadConstants.AMFIINDIA;

    private static final String FILE_PATH = ReadConstants.FILE_PATH;

    private static final String FILE_NAME = ReadConstants.FILE_NAME;

    private static final String FILE_NAME_PATH = FILE_PATH + FILE_NAME;

    private static final String historicDataLocation = FILE_PATH + ReadConstants.Historic_Data;

    private static final String MF_SUMMARY_SHEET = "Summary";

    private static final String MF_HISTORY_SHEET = "Historical";

    private static final Logger LOGGER = Logger.getLogger(ReadMFNAV.class.getName());

    private static int myStockListSize = 0;

    public static void main(String[] args) {

        LOGGER.addHandler(LogHelper.getLogHandler());
        LOGGER.info("Working on " + FILE_NAME);

        String histFileName = historicDataLocation + "/" + MutualFundUtils.getDate(Calendar.getInstance(), "yyyyMMdd") + ".txt";
        File f = new File(histFileName);
        if (!f.exists()) {
            LOGGER.info("Fetching data from        : " + AMFIINDIA);
            String result = getUrlContents(AMFIINDIA);
            FileUtilsHelper.writeToFile(histFileName, result);
            LOGGER.info("Storing Data in File      : " + f.getAbsolutePath());
        } else {
            LOGGER.info("Fetching stored data from : " + f.getAbsolutePath());
        }
        HashMap<String, FieldsDescriptor> hm = FileUtilsHelper.readFileAsString(histFileName);

        String date = printSelectedHashMap(hm);

        date = MutualFundUtils.changeDateFormat(date, "dd-MMM-yyyy", "dd-MM-yy");

        boolean updated = false;

        updated = checkIfHistoryUpdated(date, updated);

        if (updated) {
            ExcelHelper.updateHistoryColumn(date);
            LOGGER.info("Updated History");
        } else {
            LOGGER.info("Skipping History");
        }
        LOGGER.info("Completed\n\n\n");

    }

    private static boolean checkIfHistoryUpdated(String date, boolean updated) {
        try {
            FileInputStream file = new FileInputStream(new File(FILE_NAME_PATH));
            XSSFWorkbook yourworkbook = new XSSFWorkbook(file);
            XSSFSheet mfSummarySheet = yourworkbook.getSheet(MF_SUMMARY_SHEET);
            XSSFSheet mfHistorySheet = yourworkbook.getSheet(MF_HISTORY_SHEET);
            updated = ExcelHelper.updateHistory(LOGGER, mfSummarySheet, mfHistorySheet, myStockListSize, date);
            XSSFFormulaEvaluator.evaluateAllFormulaCells(yourworkbook);
            file.close();
            XSSFFormulaEvaluator.evaluateAllFormulaCells(yourworkbook);
            FileOutputStream out = new FileOutputStream(new File(FILE_NAME_PATH));
            yourworkbook.write(out);
            out.close();
        } catch (FileNotFoundException e) {
            LOGGER.severe(e.getLocalizedMessage());
        } catch (IOException e) {
            LOGGER.severe(e.getLocalizedMessage());
        }
        return updated;
    }

    private static String getUrlContents(String theUrl) {
        StringBuilder content = new StringBuilder();
        try {
            // create a url object
            URL url = new URL(theUrl);
            // create a urlconnection object
            URLConnection urlConnection = url.openConnection();
            // wrap the urlconnection in a bufferedreader
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String line;
            // read from the urlconnection via the bufferedreader
            while ((line = bufferedReader.readLine()) != null) {
                content.append(line + "\n");
            }
            bufferedReader.close();
        } catch (Exception e) {
            LOGGER.severe("Unable to access the URL");
        }
        return content.toString();
    }

    private static String printSelectedHashMap(HashMap<String, FieldsDescriptor> hm) {
        String date = "";
        try {
            FileInputStream file = new FileInputStream(new File(FILE_NAME_PATH));
            XSSFWorkbook yourworkbook = new XSSFWorkbook(file);
            XSSFSheet mfSummarySheet = yourworkbook.getSheet(MF_SUMMARY_SHEET);

            String MFID = "";
            int j = 1;

            List<String> myStockList = new ArrayList<String>();
            do {
                MFID = mfSummarySheet.getRow(j).getCell(2).getStringCellValue();
                j++;
                myStockList.add(MFID);
            } while (MFID != null && !MFID.isEmpty());
            myStockListSize = myStockList.size();
            LOGGER.info("ISIN\t\t\tDate\t\t\t\tNAV\t\t\tSchemeName");
            for (int i = 0; i < myStockList.size() - 1; i++) {
                FieldsDescriptor fd = hm.get(myStockList.get(i));
                date = fd.getDate();

                float nav = Float.valueOf(fd.getNetAssetValue());

                LOGGER.info(myStockList.get(i) + "\t" + fd.getDate() + "\t" + String.format("%15.5f", nav) + "\t\t" + fd.getScheme_Name());
                ExcelHelper.updateNAV(mfSummarySheet, i, new Double(fd.getNetAssetValue()));
            }
            file.close();
            XSSFFormulaEvaluator.evaluateAllFormulaCells(yourworkbook);
            FileOutputStream out = new FileOutputStream(new File(FILE_NAME_PATH));
            yourworkbook.write(out);
            out.close();
        } catch (FileNotFoundException e) {
            LOGGER.severe(e.getLocalizedMessage());
        } catch (IOException e) {
            LOGGER.severe(e.getLocalizedMessage());
        }
        return date;
    }

}
