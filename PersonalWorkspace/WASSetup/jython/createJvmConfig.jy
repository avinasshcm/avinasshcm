import sys
import re
import os
import sre
import java
import time
import java.util as util 
import java.util.ArrayList as ArrayList
import javax.xml.parsers.DocumentBuilderFactory as DocumentBuilderFactory
import javax.xml.parsers.DocumentBuilder as DocumentBuilder
import java.io as javaio
from java.util import Properties
from java.io import FileOutputStream, FileInputStream, IOException, File
from jarray import zeros, array
from os import path

lineseparator = java.lang.System.getProperty('line.separator')
osName = java.lang.System.getProperty('os.name')
def loadcfg():
	global cfgFile
	file=File(cfgFile)
	if not file.exists():
		print "ERROR: Property file does not exist"
		sys.exit()
		
	cfg=Properties()
	try:
		try:
			stream=FileInputStream(cfgFile)
			cfg.load(stream)
		except IOException, e:
			print "Problem loading the property file " + cfgFile
			print e.message
			e.printStackTrace()
	finally:
		stream.close()
	
	return cfg


def parseCfgFile ():

	cfg=loadcfg()
	global initialHeap, maxHeap, BankFusionPath, region, timeZone, language, dbName, profilePath ,jConsolePort
	
		#-----------------------------------------------------------------
		# Get all the General Parameters and DB Details
		#-----------------------------------------------------------------
    
	#Setting intial Heap Size same as Max heap size
	initialHeap=cfg.getProperty("JVMMaxHeapSize")
	maxHeap=cfg.getProperty("JVMMaxHeapSize")
	profilePath=cfg.getProperty("profilePath")
	jConsolePort=cfg.getProperty("JConsolePort")
	global inputNodeName, inputServerName
	inputNodeName=cfg.getProperty("NodeName")
	inputServerName=cfg.getProperty("ServerName")

	
def showAsDict( configId ) :
 	'showAsDict( configId ) - Return a dictionary of the AdminConfig.show( configID ) result.'
	result = {};
  	try :
    		#-----------------------------------------------------------------
    		# The result of the AdminConfig.show() should be a string
    		# containing many lines.  Each line of which starts and ends
    		# with brackets.  The "name" portion should be separated from the
    		# associated value by a space.
    		#-----------------------------------------------------------------
    		for item in AdminConfig.show( configId ).splitlines() :
      			if ( item[ 0 ] == '[' ) and ( item[ -1 ] == ']' ) :
        			( key, value ) = item[ 1:-1 ].split( ' ', 1 );
        			if ( value[ 0 ] == '"' ) and ( value[ -1 ] == '"' ) :
          				value = value[ 1:-1 ];
        			result[ key ] = value;
  	except NameError, e :
    		print 'Name not found: ' + str( e );
  	except :
    		kind, value = sys.exc_info()[ :2 ];
    		print 'Exception  type: ' + str( kind );
    		print 'Exception value: ' + str( value );
  	return result;	


def createJVMConfig(cellName, nodeName, serverName,JVMProperties):
	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	jvm = AdminConfig.list('JavaVirtualMachine',server)
	sessionMgr = AdminConfig.list('SessionManager',server)
	arrayJVMs = jvm.split(lineSeparator)
	cjvm = arrayJVMs[0]
	tp = AdminConfig.list('TuningParams',sessionMgr)
	arrayTP = tp.split(lineSeparator)
	cTP = arrayTP[0]
	for jvmProperty in JVMProperties:
		if (jvmProperty[0] == "BFconfigLocationList"):
			jvmProperty[3] = modifyBFconfigLocationList (cellName, nodeName, serverName,jvmProperty[0],jvmProperty[3])
		
		removeJVMConfig (cellName, nodeName, serverName,jvmProperty[0])
		app_attr_name  = ['name', jvmProperty[0]]
		app_attr_value = ['value',jvmProperty[3]]
		app_attr_required = ['required', jvmProperty[2]]
		app_attr_description = ['description', jvmProperty[1]]
		app_attr_list = [app_attr_name, app_attr_value, app_attr_required, app_attr_description]
		app_property=['systemProperties',[app_attr_list]]
		AdminConfig.modify(cjvm, [app_property])
		print "Successfully created JVM Property.." + jvmProperty[0] + " with value " + jvmProperty[3]
	AdminConfig.save()
	
	########## Setting JVM Heap Size ###########

	AdminConfig.modify(cjvm, [[ "initialHeapSize" , initialHeap]] )
	AdminConfig.modify(cjvm, [[ "maximumHeapSize" , maxHeap]] )

	AdminConfig.save()

	AdminConfig.modify(cTP, [['writeContents', "ONLY_UPDATED_ATTRIBUTES"], ['writeFrequency', "TIME_BASED_WRITE"], ['scheduleInvalidation', "true"], ['writeInterval', "300"]])

	AdminConfig.save()
	
	if ( osName.lower() != "sunos" ):
		intMaxHeapSize=int(maxHeap)
		halfMaxHeapSize=intMaxHeapSize/2
		strHalfMaxHeapSize=str(halfMaxHeapSize)

		JvmArg="-Xgcpolicy:gencon -Xmn" + strHalfMaxHeapSize + "m -Xmo" + strHalfMaxHeapSize + "m" + " -Dfile.encoding=UTF8 -Djavax.management.builder.initial= -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=" + jConsolePort

		AdminConfig.modify(cjvm, [[ "genericJvmArguments" , JvmArg]] )

		AdminConfig.save()


	print "JVM Configured Successfully"
	print ""

def removeJVMConfig (cellName, nodeName, serverName,jvmProperty):

	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	jvm = AdminConfig.list('JavaVirtualMachine',server)
	jvmDict = showAsDict( jvm );

	########## Delete existing properties #############
	for p in jvmDict[ 'systemProperties' ][ 1:-1 ].split( ' ' ) :
		if (p != ""):
			pDict = showAsDict( p );
			if(pDict[ 'name' ]==jvmProperty):
				print 'Removing:', pDict[ 'name' ]
				AdminConfig.remove( p );
				break;
	AdminConfig.save()
		
def modifyBFconfigLocationList (cellName, nodeName, serverName,jvmPropertyName,jvmPropertyValue):
	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	jvm = AdminConfig.list('JavaVirtualMachine',server)
	jvmDict = showAsDict( jvm );

	jvmPropertyValueFromWAS=""
	########## Getting existing properties #############
	for p in jvmDict[ 'systemProperties' ][ 1:-1 ].split( ' ' ) :
		if (p != ""):
			pDict = showAsDict( p );
			if(pDict[ 'name' ]==jvmPropertyName):
				jvmPropertyValueFromWAS=pDict[ 'value' ]
				print "jvmPropertyValueFromWAS is "+jvmPropertyValueFromWAS
				break;
	if (jvmPropertyValueFromWAS==""):
		return jvmPropertyValue
		
	updatedJVMPropertyValue=jvmPropertyValueFromWAS

	for singleProp in jvmPropertyValue.split(";")[::-1]:
		if updatedJVMPropertyValue.find(singleProp)<0: 
			updatedJVMPropertyValue=singleProp+";"+updatedJVMPropertyValue
	return updatedJVMPropertyValue;


def parseXML():
	name=""
	description=""
	required=""
	value=""
	i=0
	JVMProperties=ArrayList()
	dbf = DocumentBuilderFactory.newInstance()
	db = dbf.newDocumentBuilder()
	dom = db.parse(xmlFile)
	docElements = dom.getDocumentElement().getElementsByTagName('JVMCustomProperty')
	while i<docElements.length :
		j=0
		docElement=docElements.item(i)
		childNodes=docElement.getChildNodes()
		while j<childNodes.length:
			if(childNodes.item(j).nodeName=='Name'):
				name=childNodes.item(j).lastChild.nodeValue
			if(childNodes.item(j).nodeName=='Description'):
				if(childNodes.item(j).lastChild!=None):
					description=childNodes.item(j).lastChild.nodeValue
			if(childNodes.item(j).nodeName=='Required'):
				required=childNodes.item(j).lastChild.nodeValue
			if(childNodes.item(j).nodeName=='Value'):
				value=childNodes.item(j).lastChild.nodeValue
				value=replaceDollarStringIfPresent(value)
			j=j+1
		i=i+1
		JVMProperty=[name,description,required,value]
		JVMProperties.add(JVMProperty)
	return JVMProperties

def replaceDollarStringIfPresent(value):
	cfg=loadcfg();
	indexOfDollar=value.find('${')
	while(indexOfDollar!=-1):
		key=value.split('${')[1].split('}')[0]
		keyValue=cfg.getProperty(key)
		if(keyValue==None):
			keyValue=key
		value=value.replace('${'+key+'}',keyValue)
		indexOfDollar=value.find('${')
	return value

def getServer ():
	cname=""
	nname=""
	sname=""
	cells = AdminConfig.list('Cell').split(lineSeparator)
	
	for cell in cells:
		nodes = AdminConfig.list('Node', cell).split(lineSeparator)
		for node in nodes:
			cname = AdminConfig.showAttribute(cell, 'name')
			nname = AdminConfig.showAttribute(node, 'name')
	      	 	servs = AdminControl.queryNames('type=Server,cell=' + cname + ',node=' + nname + ',*').split(lineSeparator)
			print "Number of running servers on node " + nname + ": %s \n" % (len(servs))
			for server in servs:
				sname = AdminControl.getAttribute(server, 'name')
#				ptype = AdminControl.getAttribute(server, 'processType')
#				pid   = AdminControl.getAttribute(server, 'pid')
#				state = AdminControl.getAttribute(server, 'state')
#				jvm = AdminControl.queryNames('type=JVM,cell=' + cname + ',node=' + nname + ',process=' + sname + ',*')
#				osname = AdminControl.invoke(jvm, 'getProperty', 'os.name')
#				print " "
#				print "#############################################################################################################################################"
#				print " "
#				print "Execution of this Jython script will begin on server "+ sname + ", having PID " + pid + ", running on " + nname + " node in " + cname + " Cell."
#				apps = AdminControl.queryNames('type=Application,cell=' + cname + ',node=' + nname + ',process=' + sname + ',*').split(lineSeparator)
#				print "Number of applications running on " + sname + ": %s \n" % (len(apps))
#				for app in apps:
#					aname = AdminControl.getAttribute(app, 'name')
#					aCtxRoot = AdminControl.getAttribute(app, 
#					print aname + "\n"
	serverName = sname
	nodeName = nname
	cellName = cname
	return cellName, nodeName, serverName
	
cfgFile = sys.argv[0]

parseCfgFile()

#cellName,nodeName,serverName=getServer()

cells = AdminConfig.list('Cell').split(lineSeparator)
for cell in cells:
	cellName = AdminConfig.showAttribute(cell, 'name')
	print "Setting cellName to " +cellName+ " as automatically detected."

nodeName=inputNodeName
print "Setting node name to " +inputNodeName+ " as specified in the input."

serverName=inputServerName
print "Setting server name to " +inputServerName+ " as specified in the input."

xmlFile = sys.argv[1]

if(path.isfile(xmlFile)):
	JVMProperties=parseXML()
	createJVMConfig(cellName, nodeName, serverName,JVMProperties)





