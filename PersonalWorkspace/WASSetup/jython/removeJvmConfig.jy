import sys
import re
import os
import sre
import java
import time
import java.util as util 
import java.io as javaio
from java.util import Properties
from java.io import FileOutputStream, FileInputStream, IOException, File
from jarray import zeros, array
from os import path

lineseparator = java.lang.System.getProperty('line.separator')
osName = java.lang.System.getProperty('os.name')

	
def showAsDict( configId ) :
 	'showAsDict( configId ) - Return a dictionary of the AdminConfig.show( configID ) result.'
	result = {};
  	try :
    		#-----------------------------------------------------------------
    		# The result of the AdminConfig.show() should be a string
    		# containing many lines.  Each line of which starts and ends
    		# with brackets.  The "name" portion should be separated from the
    		# associated value by a space.
    		#-----------------------------------------------------------------
    		for item in AdminConfig.show( configId ).splitlines() :
      			if ( item[ 0 ] == '[' ) and ( item[ -1 ] == ']' ) :
        			( key, value ) = item[ 1:-1 ].split( ' ', 1 );
        			if ( value[ 0 ] == '"' ) and ( value[ -1 ] == '"' ) :
          				value = value[ 1:-1 ];
        			result[ key ] = value;
  	except NameError, e :
    		print 'Name not found: ' + str( e );
  	except :
    		kind, value = sys.exc_info()[ :2 ];
    		print 'Exception  type: ' + str( kind );
    		print 'Exception value: ' + str( value );
  	return result;	

	
	

	
	
def removeJVMConfig (cellName, nodeName, serverName):

	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	jvm = AdminConfig.list('JavaVirtualMachine',server)
	jvmDict = showAsDict( jvm );

	########## Delete existing properties #############
	for p in jvmDict[ 'systemProperties' ][ 1:-1 ].split( ' ' ) :
		if (p != ""):
			pDict = showAsDict( p );
      			print 'Removing:', pDict[ 'name' ]
      			AdminConfig.remove( p );
		AdminConfig.save()
	

def getServer ():
	cname=""
	nname=""
	sname=""
	cells = AdminConfig.list('Cell').split(lineSeparator)
	
	for cell in cells:
		nodes = AdminConfig.list('Node', cell).split(lineSeparator)
		for node in nodes:
			cname = AdminConfig.showAttribute(cell, 'name')
			nname = AdminConfig.showAttribute(node, 'name')
	      	 	servs = AdminControl.queryNames('type=Server,cell=' + cname + ',node=' + nname + ',*').split(lineSeparator)
			print "Number of running servers on node " + nname + ": %s \n" % (len(servs))
			for server in servs:
				sname = AdminControl.getAttribute(server, 'name')
				ptype = AdminControl.getAttribute(server, 'processType')
				pid   = AdminControl.getAttribute(server, 'pid')
				state = AdminControl.getAttribute(server, 'state')
#				print " "
#				print "#############################################################################################################################################"
#				print " "
#				print "Execution of this Jython script will begin on server "+ sname + ", having PID " + pid + ", running on " + nname + " node in " + cname + " Cell."
#				apps = AdminControl.queryNames('type=Application,cell=' + cname + ',node=' + nname + ',process=' + sname + ',*').split(lineSeparator)
#				print "Number of applications running on " + sname + ": %s \n" % (len(apps))
#				for app in apps:
#					aname = AdminControl.getAttribute(app, 'name')
#					aCtxRoot = AdminControl.getAttribute(app, 
#					print aname + "\n"
	serverName = sname
	nodeName = nname
	cellName = cname
	return cellName, nodeName, serverName


cellName,nodeName,serverName=getServer()

removeJVMConfig(cellName, nodeName, serverName)