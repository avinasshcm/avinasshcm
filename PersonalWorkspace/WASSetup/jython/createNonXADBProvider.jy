import java
import time
import java.util as util 
import java.io as javaio
from java.util import Properties
from java.io import FileOutputStream, FileInputStream, IOException, File
from jarray import zeros, array
from os import path

lineseparator = java.lang.System.getProperty('line.separator')
osName = java.lang.System.getProperty('os.name')
def loadcfg(cfgFile):
	file=File(cfgFile)
	cfg=Properties()
	try:
		try:
			stream=FileInputStream(cfgFile)
			cfg.load(stream)
		except IOException, e:
			print "Problem loading the property file " + cfgFile
			print e.message
			e.printStackTrace()
	finally:
		stream.close()
	
	return cfg


def parseCfgFile ():

	cfg=loadcfg(cfgFile)
	global dbVendor, dbServerHost, dbName, dbPort, dBAlias
	global NonJTAProviderName,NonJTADatasourceName,NonJTADatasourceJNDI,NonJTADatasourceDesc,DB_DRIVER_JARS_PATH,JTA_Enabled

       
        
	#-----------------------------------------------------------------
	# Get all the General Parameters and DB Details
	#-----------------------------------------------------------------
    
	dbVendor = cfg.getProperty("DB_TYPE")
	dbServerHost = cfg.getProperty("DB_HOSTNAME")
	dbName = cfg.getProperty("DB_NAME")
	dbPort = cfg.getProperty("DB_PORT")
	dBAlias=cfg.getProperty("DBAlias")
	NonJTAProviderName=cfg.getProperty("NonJTAProviderName")
	NonJTADatasourceName=cfg.getProperty("NonJTADatasourceName")
	NonJTADatasourceJNDI=cfg.getProperty("NonJTADatasourceJNDI")
	NonJTADatasourceDesc=cfg.getProperty("NonJTADatasourceDesc")
	DB_DRIVER_JARS_PATH=cfg.getProperty("INSTALLATION_ROOT_LOCATION")+"/DatabaseJars"
	serverStartUp_Path=cfg.getProperty("INSTALLATION_ROOT_LOCATION")+"/BankFusion/SYMBOLIC/ServerConf/conf/serverstartup.properties"
	
	propertyReader=loadcfg(serverStartUp_Path)
	JTA_Enabled=propertyReader.getProperty("bankfusion.JTAEnabled")
	if(JTA_Enabled == None):
		JTA_Enabled="true"
		
	global inputNodeName, inputServerName
	inputNodeName=cfg.getProperty("NodeName")
	inputServerName=cfg.getProperty("ServerName")
	
	
	
	
	
def showAsDict( configId ) :
 	'showAsDict( configId ) - Return a dictionary of the AdminConfig.show( configID ) result.'
	result = {};
  	try :
    		#-----------------------------------------------------------------
    		# The result of the AdminConfig.show() should be a string
    		# containing many lines.  Each line of which starts and ends
    		# with brackets.  The "name" portion should be separated from the
    		# associated value by a space.
    		#-----------------------------------------------------------------
    		for item in AdminConfig.show( configId ).splitlines() :
      			if ( item[ 0 ] == '[' ) and ( item[ -1 ] == ']' ) :
        			( key, value ) = item[ 1:-1 ].split( ' ', 1 );
        			if ( value[ 0 ] == '"' ) and ( value[ -1 ] == '"' ) :
          				value = value[ 1:-1 ];
        			result[ key ] = value;
  	except NameError, e :
    		print 'Name not found: ' + str( e );
  	except :
    		kind, value = sys.exc_info()[ :2 ];
    		print 'Exception  type: ' + str( kind );
    		print 'Exception value: ' + str( value );
  	return result;









def checkExistingDS ():
	dsBinary = 0
	wsDsBinary = 0
	######### Check for DataSource ########
	dataSources = AdminConfig.list( 'DataSource' ).splitlines();
	for ds in dataSources :
		dsDict    = showAsDict( ds )
		jndiName  = dsDict[ 'jndiName' ];
		if (jndiName == "jdbc/"+dbVendor+NonJTADatasourceJNDI):
				dsBinary += 1
		if(dsBinary == 1):
			print "removing existing datasource " +jndiName
			AdminConfig.remove(ds)
			dsBinary=0
		
	AdminConfig.save()
	


def checkExistingNonXAJP ():
	jpBinary = 0

	######### Check for JDBC Provider ########	
	jdbcProvs = AdminConfig.list ('JDBCProvider').splitlines();
	for jp in jdbcProvs :
		jpDict = showAsDict( jp )
		jpName = jpDict[ 'name' ];
		if (jpName == dbVendor+NonJTAProviderName):
				jpBinary += 1
		if(jpBinary == 1):
			print "removing existing JDBC Provider " +jpName
			AdminConfig.remove(jp)
			jpBinary=0
	AdminConfig.save()


	
def createJDBCProvider (dbVendor, cellName, nodeName, serverName):
	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	provName = ['name', dbVendor+NonJTAProviderName]
	################# Creating JDBC Provider ###############
	if (dbVendor == "DB2"):
		implCN = ['implementationClassName', "com.ibm.db2.jcc.DB2ConnectionPoolDataSource"]
		jdbcCP = ['classpath', "${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc.jar ${UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar ${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cisuz.jar"]
		jdbcXA = ['xa', "false"]
		jdbcProvType = ['providerType', "DB2 Universal JDBC Driver Provider"]
		varName = ['symbolicName', "DB2UNIVERSAL_JDBC_DRIVER_PATH"]
			
					
	if (dbVendor == "ORACLE"):
		implCN = ['implementationClassName', "oracle.jdbc.pool.OracleConnectionPoolDataSource"]
		jdbcCP = ['classpath', "${ORACLE_JDBC_DRIVER_PATH}/ojdbc7.jar"]
		jdbcXA = ['xa', "false"]
		jdbcProvType = ['providerType', "ORACLE JDBC Driver"]
		varName = ['symbolicName', "ORACLE_JDBC_DRIVER_PATH"]

			
	if (dbVendor == "SQLSERVER"):
		implCN = ['implementationClassName', "com.microsoft.sqlserver.jdbc.SQLServerConnectionPoolDataSource"]
		jdbcCP = ['classpath', "${MICROSOFT_JDBC_DRIVER_PATH}/sqljdbc4.jar"]
		jdbcXA = ['xa', "false"]
		jdbcProvType = ['providerType', "Microsoft SQL Server JDBC Driver"]
		varName = ['symbolicName', "MICROSOFT_JDBC_DRIVER_PATH"]

			
	if (dbVendor == "AS400"):
		implCN = ['implementationClassName', "com.ibm.as400.access.AS400JDBCConnectionPoolDataSource"]
		jdbcCP = ['classpath', "${AS400_JDBC_DRIVER_PATH}/jt400.jar "]
		jdbcXA = ['xa', "false"]
		jdbcProvType = ['providerType', "DB2 UDB for iSeries (Toolbox)"]
		varName = ['symbolicName', "AS400_JDBC_DRIVER_PATH"]	

	jdbcAttrs = [jdbcCP, provName, implCN, jdbcProvType, jdbcXA]
	AdminConfig.create('JDBCProvider', server, jdbcAttrs)
	AdminConfig.save()
	
	
def checkVariable (variableMap, varName):
	varBinary = 0	

	######### Check for JDBC PRovider Variable ########
	var = AdminConfig.list('VariableSubstitutionEntry',variableMap).splitlines();
	for jdbcVar in var :
		varDict = showAsDict( jdbcVar )
		checkVar = varDict[ 'symbolicName' ];
		if (checkVar == varName):
			varBinary += 1
	return varBinary;
	
def dbVar():
	################# Creating WebSphere variable for DB Driver path #################
	if (dbVendor == "SQLSERVER"):
		varName = "MICROSOFT_JDBC_DRIVER_PATH"
	if (dbVendor == "ORACLE"):
		varName = "ORACLE_JDBC_DRIVER_PATH"
	if (dbVendor == "DB2"):
		varName = "DB2UNIVERSAL_JDBC_DRIVER_PATH"
	if (dbVendor == "AS400"):
		varName = "AS400_JDBC_DRIVER_PATH"	

	variableMap = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName+"/VariableMap:/")
		
	varBinary = checkVariable(variableMap, varName);
			
	if (varBinary == 0):
		varNameval = ['symbolicName', varName]
		varValue = ['value', DB_DRIVER_JARS_PATH]
		varAttrs = [varNameval, varValue]
		AdminConfig.create("VariableSubstitutionEntry", variableMap, varAttrs)
		AdminConfig.save()
		print dbVendor+" Driver location has been created as a variable"
		print ""
		

def createDS (dbVendor, cellName, nodeName, serverName):
	################# Creating DataSource Config ###############
	server = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName)
	dsAuth = ['authDataAlias', nodeName+"/"+dBAlias]
	jdbcProvName = AdminConfig.getid("/Cell:"+cellName+"/Node:"+nodeName+"/Server:"+serverName+"/JDBCProvider:"+dbVendor+NonJTAProviderName+"/")
	dsName = ['name', dbVendor+NonJTADatasourceName]
	jndiName = ['jndiName', "jdbc/"+dbVendor+NonJTADatasourceJNDI]
	dsDescription = ['description', "Datasource to be used by BFUB Application"]
	dsStmtCacheSize = ['statementCacheSize', "300"]

	if (dbVendor == "DB2"):
		dsHelperClass = ['datasourceHelperClassname', "com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper"]
	if (dbVendor == "ORACLE"):
		dsHelperClass = ['datasourceHelperClassname', "com.ibm.websphere.rsadapter.Oracle11gDataStoreHelper"]
	if (dbVendor == "SQLSERVER"):
		dsHelperClass = ['datasourceHelperClassname', "com.ibm.websphere.rsadapter.ConnectJDBCDataStoreHelper"]
	if (dbVendor == "AS400"):
		dsHelperClass = ['datasourceHelperClassname', "com.ibm.websphere.rsadapter.DB2AS400DataStoreHelper"]	

	dsAttrs = [dsName, jndiName, dsHelperClass, dsDescription, dsAuth, dsStmtCacheSize]
	ds = AdminConfig.create('DataSource', jdbcProvName, dsAttrs)
	ds_props = AdminConfig.create('J2EEResourcePropertySet', ds, [])
	AdminConfig.create('ConnectionPool', ds, [['connectionTimeout', "180"], ['maxConnections', "300"], ['unusedTimeout', "500"], ['minConnections', "10"], ['purgePolicy', "FailingConnectionOnly"], ['agedTimeout', "625"], ['reapTime', "375"], ['freePoolDistributionTableSize', "0"], ['stuckTime', "0"], ['stuckTimerTime', "0"], ['surgeCreationInterval', "0"], ['numberOfSharedPoolPartitions', "0"], ['stuckThreshold', "0"], ['numberOfFreePoolPartitions', "0"], ['surgeThreshold', "-1"]])

	if (dbVendor == "DB2"):
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "driverType"], ['type', "java.lang.String"], ['value', "4"]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "databaseName"], ['type', "java.lang.String"], ['value', dbName]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "serverName"], ['type', "java.lang.String"], ['value', dbServerHost]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "portNumber"], ['type', "java.lang.String"], ['value', dbPort]])
					
	if (dbVendor == "ORACLE"):
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "driverType"], ['type', "java.lang.String"], ['value', "thin"]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "URL"], ['type', "java.lang.String"], ['value', "jdbc:oracle:thin:@"+dbServerHost+":"+dbPort+":"+dbName]])
			
	if (dbVendor == "SQLSERVER"):
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "driverType"], ['type', "java.lang.String"], ['value', "4"]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "databaseName"], ['type', "java.lang.String"], ['value', dbName]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "serverName"], ['type', "java.lang.String"], ['value', dbServerHost]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "portNumber"], ['type', "java.lang.String"], ['value', dbPort]])
		
	if (dbVendor == "AS400"):
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "driverType"], ['type', "java.lang.String"], ['value', "4"]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "databaseName"], ['type', "java.lang.String"], ['value', dbName]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "serverName"], ['type', "java.lang.String"], ['value', dbServerHost]])
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "portNumber"], ['type', "java.lang.String"], ['value', dbPort]])	
	
	AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "webSphereDefaultIsolationLevel"], ['type', "java.lang.Integer"], ['value', "2"]])
	if(JTA_Enabled == "true"):
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "nonTransactionalDataSource"], ['type', "java.lang.Boolean"], ['value', "true"]]) 
	else:
		AdminConfig.create('J2EEResourceProperty', ds_props, [['name', "nonTransactionalDataSource"], ['type', "java.lang.Boolean"], ['value', "false"]]) 
	AdminConfig.save()
	print "nonxa datasource created successfully" 

	
def createDBConfig (cellName, nodeName, serverName):
	checkExistingDS();
	checkExistingNonXAJP();
	createJDBCProvider(dbVendor, cellName, nodeName, serverName)
	print dbVendor+NonJTAProviderName+" has been configured successfully"
	print ""
	dbVar()
	createDS(dbVendor, cellName, nodeName, serverName)
	print  dbVendor+NonJTADatasourceName+" has been created succesfully "
	#testconnection()

def testconnection():
	testconn=0
	websphere=AdminControl.queryNames('WebSphere:name=DataSourceCfgHelper,*')
	dataSources = AdminConfig.list( 'DataSource' ).splitlines();
	for ds in dataSources :
		dsDict    = showAsDict( ds )
		jndiName  = dsDict[ 'jndiName' ];
		if (dbVendor == "DB2"):
			if (jndiName == "jdbc/"+dbVendor+NonJTADatasourceJNDI):
				AdminControl.invoke(websphere,'testConnection',ds,'java.lang.String')
				testconn +=1
				break
		if (dbVendor == "ORACLE"):
			if (jndiName == "jdbc/"+dbVendor+NonJTADatasourceJNDI):
				AdminControl.invoke(websphere,'testConnection',ds,'')
				testconn +=1
				break
		if (dbVendor == "SQLSERVER"):
			if (jndiName == "jdbc/"+dbVendor+NonJTADatasourceJNDI):
				AdminControl.invoke(websphere,'testConnection',ds,'')
				testconn +=1
				break
		if (dbVendor == "AS400"):
			if (jndiName == "jdbc/"+dbVendor+NonJTADatasourceJNDI):
				AdminControl.invoke(websphere,'testConnection',ds,'java.lang.String')
				testconn +=1
				break		
	if(testconn == 1):
		print "Test Connection to DataSource "+jndiName+" Done...."
	if(testconn == 0):
		print "ERROR: Test connection to DataSource "+jndiName+" failed."	
		sys.exit()

def getServer ():
	cname=""
	nname=""
	sname=""
	cells = AdminConfig.list('Cell').split(lineSeparator)
	
	for cell in cells:
		nodes = AdminConfig.list('Node', cell).split(lineSeparator)
		for node in nodes:
			cname = AdminConfig.showAttribute(cell, 'name')
			nname = AdminConfig.showAttribute(node, 'name')
	      	 	servs = AdminControl.queryNames('type=Server,cell=' + cname + ',node=' + nname + ',*').split(lineSeparator)
			print "Number of running servers on node " + nname + ": %s \n" % (len(servs))
			for server in servs:
				sname = AdminControl.getAttribute(server, 'name')
				ptype = AdminControl.getAttribute(server, 'processType')
				pid   = AdminControl.getAttribute(server, 'pid')
				state = AdminControl.getAttribute(server, 'state')
				print " "
				print "#############################################################################################################################################"
				print " "
				print "Execution of this Jython script will begin on server "+ sname + ", having PID " + pid + ", running on " + nname + " node in " + cname + " Cell."
#				apps = AdminControl.queryNames('type=Application,cell=' + cname + ',node=' + nname + ',process=' + sname + ',*').split(lineSeparator)
#				print "Number of applications running on " + sname + ": %s \n" % (len(apps))
#				for app in apps:
#					aname = AdminControl.getAttribute(app, 'name')
#					aCtxRoot = AdminControl.getAttribute(app, 
#					print aname + "\n"
	serverName = sname
	nodeName = nname
	cellName = cname
	return cellName, nodeName, serverName
	
cfgFile = sys.argv[0]

parseCfgFile()

#cellName,nodeName,serverName=getServer()

cells = AdminConfig.list('Cell').split(lineSeparator)
for cell in cells:
	cellName = AdminConfig.showAttribute(cell, 'name')
	print "Setting cellName to " +cellName+ " as automatically detected."

nodeName=inputNodeName
print "Setting node name to " +inputNodeName+ " as specified in the input."

serverName=inputServerName
print "Setting server name to " +inputServerName+ " as specified in the input."

createDBConfig (cellName, nodeName, serverName)


	