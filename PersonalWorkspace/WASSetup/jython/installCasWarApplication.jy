import java
import time
import java.util as util 
import java.io as javaio
from java.util import Properties
from java.io import FileOutputStream, FileInputStream, IOException, File
from jarray import zeros, array
from os import path

lineseparator = java.lang.System.getProperty('line.separator')
osName = java.lang.System.getProperty('os.name')
def loadcfg():
	global cfgFile
	file=File(cfgFile)
	cfg=Properties()
	try:
		try:
			stream=FileInputStream(cfgFile)
			cfg.load(stream)
		except IOException, e:
			print "Problem loading the property file " + cfgFile
			print e.message
			e.printStackTrace()
	finally:
		stream.close()
	
	return cfg


def parseCfgFile ():

	cfg=loadcfg()
	global caswarContext, casapplName, caswarName, caswarDirectory
        
	#-----------------------------------------------------------------
	# Get all the General Parameters and DB Details
	#-----------------------------------------------------------------
    
	caswarContext=cfg.getProperty("caswarcontext")
	casapplName=cfg.getProperty("casapplicationName")
	caswarName=cfg.getProperty("caswarname")
	caswarDirectory=cfg.getProperty("INSTALLATION_ROOT_LOCATION")+"/BankFusion/SYMBOLIC/Deployables"

	global inputNodeName, inputServerName
	inputNodeName=cfg.getProperty("NodeName")
	inputServerName=cfg.getProperty("ServerName")


def uninstallApp (appToUninstall):
   	print "Uninstalling app: "+appToUninstall
	appToUninstall = str(appToUninstall).strip();
    	AdminApp.uninstall(appToUninstall)
    	AdminConfig.save();
	syncObj = AdminControl.completeObjectName('type=NodeSync,node='+nodeName+',*')
	if(syncObj!=''):
		AdminControl.invoke(syncObj, 'sync')
	print "Uninstallation complete for "+appToUninstall
	print " "	
	
def installCASApp (cellName, nodeName, serverName):
#	if (earPath == ""):
#		fullPath = profilePath+"/installableApps/"+earFileName
#	else:
	isCASWarDeployed=0
	fullPath = caswarDirectory+"/"+caswarName
	wasMajorVersion = AdminTask.getNodeMajorVersion("-nodeName " + nodeName)
	appInstalled = "false"
	print fullPath
	############### Uninstall the app if already deployed ##############
	appToUninstall = ""
	appsBefore = AdminApp.list();
	if (appsBefore != ""):
		appsBefore = appsBefore.split("\n")
		for i in appsBefore:    
				appToUninstall = str(i)
				if(appToUninstall.strip() == casapplName):
					isCASWarDeployed=1
	
	if(isCASWarDeployed == 0):
		node = "-node "+nodeName
		cell = "-cell "+cellName
		svr = "-server "+serverName
		ctxRoot = "-contextroot /"+caswarContext
		applicationName=casapplName
		appName = "-appname "+ casapplName
			
		if (wasMajorVersion == "8"):	
			AdminApp.install(fullPath, [node, cell, svr ,ctxRoot, appName, '-MapWebModToVH [["Central Authentication System (CAS) 3.5.2" cas-server-webapp-3.5.2.war,WEB-INF/web.xml default_host]]'])
		else:
			AdminApp.install(fullPath, [node, cell, svr ,ctxRoot, appName])
		AdminConfig.save()	
		depApp = AdminConfig.getid("/Deployment:"+applicationName)
		depObject = AdminConfig.showAttribute(depApp, 'deployedObject')
		classldr = AdminConfig.showAttribute(depObject, 'classloader')
		AdminConfig.modify(depObject, [['warClassLoaderPolicy', 'SINGLE']])
		AdminConfig.modify(classldr, [['mode', 'PARENT_FIRST']])
		AdminConfig.save()
		syncObj = AdminControl.completeObjectName('type=NodeSync,node='+nodeName+',*')
		if(syncObj!=''):
			AdminControl.invoke(syncObj, 'sync')
		appManager = AdminControl.queryNames('cell='+cellName+',node='+nodeName+',type=ApplicationManager,process='+serverName+',*')
		AdminControl.invoke(appManager, 'startApplication', casapplName)
		print casapplName+ "application started successfully"
	
def getServer ():
	cname=""
	nname=""
	sname=""
	cells = AdminConfig.list('Cell').split(lineSeparator)
	
	for cell in cells:
		nodes = AdminConfig.list('Node', cell).split(lineSeparator)
		for node in nodes:
			cname = AdminConfig.showAttribute(cell, 'name')
			nname = AdminConfig.showAttribute(node, 'name')
	      	 	servs = AdminControl.queryNames('type=Server,cell=' + cname + ',node=' + nname + ',*').split(lineSeparator)
			print "Number of running servers on node " + nname + ": %s \n" % (len(servs))
			for server in servs:
				sname = AdminControl.getAttribute(server, 'name')
				ptype = AdminControl.getAttribute(server, 'processType')
				pid   = AdminControl.getAttribute(server, 'pid')
				state = AdminControl.getAttribute(server, 'state')
				print " "
				print "#############################################################################################################################################"
				print " "
				print "Execution of this Jython script will begin on server "+ sname + ", having PID " + pid + ", running on " + nname + " node in " + cname + " Cell."
				apps = AdminControl.queryNames('type=Application,cell=' + cname + ',node=' + nname + ',process=' + sname + ',*').split(lineSeparator)
#				print "Number of applications running on " + sname + ": %s \n" % (len(apps))
#				for app in apps:
#					aname = AdminControl.getAttribute(app, 'name')
#					aCtxRoot = AdminControl.getAttribute(app, 
#					print aname + "\n"
	serverName = sname
	nodeName = nname
	cellName = cname
	return cellName, nodeName, serverName

cfgFile = sys.argv[0]

parseCfgFile()

#cellName,nodeName,serverName=getServer()

cells = AdminConfig.list('Cell').split(lineSeparator)
for cell in cells:
	cellName = AdminConfig.showAttribute(cell, 'name')
	print "Setting cellName to " +cellName+ " as automatically detected."

nodeName=inputNodeName
print "Setting node name to " +inputNodeName+ " as specified in the input."

serverName=inputServerName
print "Setting server name to " +inputServerName+ " as specified in the input."

installCASApp (cellName, nodeName, serverName)