import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.logging.Logger;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.xml.XmlBeanFactory;

public class CheckBuild {
	private static final Logger LOGGER = Logger.getLogger(CheckBuild.class.getName());
	public static String Good_Build_File = ReadPropertyFile.Good_Build_File;
	public static String BFP_Path = ReadPropertyFile.BFP_Path + "/" + "LastReleasedBuildNumber.txt";
	public static String CBS_Path = ReadPropertyFile.CBS_Path + "/" + Good_Build_File;
	public static String UB_Path = ReadPropertyFile.UB_Path + "/" + Good_Build_File;
	public static String PTY_Path = ReadPropertyFile.PTY_Path + "/" + Good_Build_File;
	public static String BFT_Path = ReadPropertyFile.BFT_Path + "/" + Good_Build_File;
	public static String Destination_Folder = ReadPropertyFile.Destination_Folder;
	public static String BT_Specific = ReadPropertyFile.BT_Specific;
	public static String AM_PM_Required = ReadPropertyFile.AM_PM_Required;
	public static String UBOF_Required = ReadPropertyFile.UBOF_Required;
	public static String BT_Specific_Required = ReadPropertyFile.BT_Specific_Required;
	int BFP_Latest;
	int CBS_Latest;
	int UB_Latest;
	int PTY_Latest;
	int BFT_Latest;
	int BFP_Current;
	int CBS_Current;
	int UB_Current;
	int PTY_Current;
	int BFT_Current;
	XmlBeanFactory factory = CurrentBuildProviderBeanFactory.getFactory();
	CurrentBuildProvider initStringProvider = (CurrentBuildProvider) factory.getBean("CURRENT_BUILD_PROVIDER");

	public CheckBuild(String[] module) throws IOException {
		File file = new File("LatestBuild.properties");
		file.delete();
		//Read Current Build from Respective Locations and Write it to LatestBuild.properties
		readFile(BFP_Path, "BFP");
		readFile(CBS_Path, "CBS");
		readFile(UB_Path, "UB");
		readFile(PTY_Path, "Party");
		readFile(BFT_Path, "BFT");
		//Read Latest Build Details from LatestBuild.properties
		BFP_Latest = ReadLatestBuild.BFP_Latest_Build;
		CBS_Latest = ReadLatestBuild.CBS_Latest_Build;
		UB_Latest = ReadLatestBuild.UB_Latest_Build;
		PTY_Latest = ReadLatestBuild.PTY_Latest_Build;
		BFT_Latest = ReadLatestBuild.BFT_Latest_Build;
		//Read Current Build Details from BFTB_INSTALL_HISTORY CurrentBuild.properties 
		BFP_Current = initStringProvider.getBFP_Curr_Build();
		CBS_Current = initStringProvider.getCBS_Curr_Build();
		UB_Current = initStringProvider.getUB_Curr_Build();
		PTY_Current = initStringProvider.getPTY_Curr_Build();
		BFT_Current = initStringProvider.getBFT_Curr_Build();
		//TODO
		//For BundleSequence.properties
		ArrayList<String> allApps = new ArrayList<String>();
		ArrayList<String> bankFusion = new ArrayList<String>();
		ArrayList<String> cbs = new ArrayList<String>();
		ArrayList<String> ub = new ArrayList<String>();
		ArrayList<String> bfbt = new ArrayList<String>();
		ArrayList<String> party = new ArrayList<String>();
		int j = 0;
		while (j < module.length) {
			switch (Integer.parseInt(module[j])) {
			case 1:
				System.out.println("\n\nCopying BankFusion Patch Bundles...");
				for (int i = BFP_Current + 1; i <= BFP_Latest; i++) {
					copyPatch("BFP", i, bankFusion);
				}
				break;
			case 2:
				System.out.println("\nCopying CBS Patch Bundles...");
				for (int i = CBS_Current + 1; i <= CBS_Latest; i++) {
					copyPatch("CBS", i, cbs);
					if (AM_PM_Required.equals("true")) {
						copyPatch("BFAM", i, cbs);
						copyPatch("BFPM", i, cbs);
						copyPatch("BFAO", i, cbs);
						copyPatch("WIF", i, cbs);
					}
				}
				break;
			case 3:
				System.out.println("\nCopying Party Patch Bundles...");
				for (int i = PTY_Current + 1; i <= PTY_Latest; i++) {
					copyPatch("Party", i, party);
				}
				break;
			case 4:
				System.out.println("\nCopying UB Patch Bundles...");
				for (int i = UB_Current + 1; i <= UB_Latest; i++) {
					copyPatch("UB", i, ub);
					if (UBOF_Required.equals("true"))
						copyPatch("UBOF", i, ub);
				}
				break;
			case 5:
				System.out.println("\nCopying Teller Patch Bundles...");
				for (int i = BFT_Current + 1; i <= BFT_Latest; i++) {
					copyPatch("BFT", i, bfbt);
					if (BT_Specific_Required.equals("true")) {
						copyPatch(BT_Specific, i, bfbt);
					}
				}
				break;
			case 0:
				exit(0);
			default:
				System.out.println("\nInvalid Option...!!!!");
			}
			j++;
		}
		//TODO
		//allApps = bankFusion + cbs +party + ub +bfbt;
		allApps.addAll(bankFusion);
		allApps.addAll(cbs);
		allApps.addAll(party);
		allApps.addAll(ub);
		allApps.addAll(bfbt);
		//System.out.println(allApps);
		File sequenceFile = new File(Destination_Folder + "/BundleSequence.properties");
		if (sequenceFile.exists())
			sequenceFile.delete();
		PrintWriter out1 = new PrintWriter(new FileWriter(Destination_Folder + "/BundleSequence.properties", true));
		//while(allApps.)
		for (int i = 0; i < allApps.size(); i++) {
			out1.println(allApps.get(i));
		}
		out1.close();
		System.out.println("\n\nCompleted...!!!");
	}

	private void exit(int i) {
		System.out.println(i);
	}

	public static void main(String[] args) throws IOException {
		System.out.println("\n\nYou are about to Copy Patch Bundles.");
		System.out.println("Select your option from the list below.");
		System.out.println("For multiple options provide the input comma separated");
		System.out.println("Example : ");
		System.out.println("	(i)   For a Complete UB Copying input options as 1,2,3,4,5");
		System.out.println("...............................................");
		System.out.println("1 - BF      (Copy Patch Bundles of BF)");
		System.out.println("2 - CBS	    (Copy Patch Bundles of CBS)");
		System.out.println("3 - Party	(Copy Patch Bundles of Party)");
		System.out.println("4 - UB		(Copy Patch Bundles of UB)");
		System.out.println("5 - BFT		(Copy Patch Bundles of BFT + (BTDC or BTBS))");
		System.out.println("0 - EXIT");
		System.out.print("\nEnter Your Option : ");
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String option = null;
		try {
			option = br.readLine();
		}
		catch (IOException ioe) {
			System.out.println("IO error trying to read Input!");
			//System.exit(1);
		}
		String[] modules = option.split(",");
		CheckBuild cB = new CheckBuild(modules);
		cB.toString();
	}

	public void readFile(String fName, String module) {
		String moduleName = module;
		BufferedReader br = null;
		try {
			String sCurrentLine;
			br = new BufferedReader(new FileReader(fName));
			while ((sCurrentLine = br.readLine()) != null) {
				int index = sCurrentLine.lastIndexOf(".");
				if (index > 0) {
					String truncate = sCurrentLine.substring(index + 1);
					sCurrentLine = truncate;
				}
				PrintWriter out = new PrintWriter(new FileWriter("LatestBuild.properties", true));
				out.println(moduleName + "=" + sCurrentLine.trim());
				out.close();
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if (br != null)
					br.close();
			}
			catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}

	/*
		private static void getSourceFileName(File[] fList, File sourcePatchFile, File sourceKeyFile, ArrayList<String> module) {
			for (File fn : fList) {
				if (fn.getName().endsWith(".bfj")) {
					sourcePatchFile = fn;
					module.add(fn.getName());
				}
				else if (fn.getName().endsWith(".key")) {
					sourceKeyFile = fn;
				}
			}
		}
	*/
	private static void copyPatch(String moduleName, int buildNumber, ArrayList<String> module) throws IOException {
		File sourcePatchFile = null;
		File sourceKeyFile = null;
		String patchName = "";
		String keyName = "";
		String modName = moduleName;
		String sFileName = null;
		//String Version = ReadPropertyFile.Version + "." + ReadPropertyFile.ServicePack;
		//if (Version.equals("4.2.6") || Version.equals("4.2.7") || Version.equals("5.1.0")) {
		if (moduleName.equals("BFP")) {
			modName = "FBP/Bundles/PatchBundle";
			if (ReadPropertyFile.Version.startsWith("4.0") || ReadPropertyFile.Version.startsWith("4.1"))
				sFileName = "BFP";
			else
				sFileName = "FBP";
			String ver = ReadPropertyFile.Version;
			String folderName = "";
			int len = ver.lastIndexOf(".");
			if (len != 1) {
				folderName = ReadPropertyFile.BFP_Path + "/" + sFileName + "_" + ReadPropertyFile.Version + ".0." + buildNumber + "/ConsolidatedPatchBundle/BFComplete/Bundles/BankFusion/ConsolidatedPatchBundle";
			}
			else if (len == 1) {
				folderName = ReadPropertyFile.BFP_Path + "/" + sFileName + "_" + getPatchVersion() + buildNumber + "/ConsolidatedPatchBundle/BFComplete/Bundles/BankFusion/ConsolidatedPatchBundle";
			}
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				//getSourceFileName(fList, sourcePatchFile, sourceKeyFile, module);
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						
						Path path = Paths.get(fn.getAbsolutePath());
						BasicFileAttributes fba = Files.getFileAttributeView(path,BasicFileAttributeView.class).readAttributes();
						//System.out.println("FileName : "+fn.getAbsolutePath());
						System.out.println("Creation Time : "+fba.creationTime());
						
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("CBS")) {
			modName = "FBCBS/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + "_" + getPatchVersion() + buildNumber + "/CBS/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						Path path = Paths.get(fn.getAbsolutePath());
						BasicFileAttributes fba = Files.getFileAttributeView(path,BasicFileAttributeView.class).readAttributes();
						System.out.println("Creation Time : "+fba.creationTime());
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFAO")) {
			modName = "FBAO/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + "_" + getPatchVersion() + buildNumber + "/AccountOwnership/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFAM")) {
			modName = "FBAM/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + "_" + getPatchVersion() + buildNumber + "/AccountManagement/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFPM")) {
			modName = "FBPM/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + "_" + getPatchVersion() + buildNumber + "/PaymentManagement/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("WIF")) {
			modName = "WIF/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + "_" + getPatchVersion() + buildNumber + "/WhatIf/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("UB")) {
			modName = "FBEssence/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.UB_Path + "/" + "FBE" + "_" + getPatchVersion() + buildNumber + "/UBCore/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("UBOF")) {
			modName = "FBEOF/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.UB_Path + "/" + "FBE" + "_" + getPatchVersion() + buildNumber + "/UBOffline/PatchBundle";
			;
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		//TODO
		if (moduleName.equals("BFT")) {
			modName = "FBETeller/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.BFT_Path + "/" + "Teller" + "_" + getPatchVersion() + buildNumber + "/BranchTeller/PatchBundle";
			//System.out.println(folderName);
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if ((fn.getName().startsWith("Teller") || fn.getName().startsWith("BFT")) && fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if ((fn.getName().startsWith("Teller") || fn.getName().startsWith("BFT")) && fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		//TODO
		if (moduleName.equals(BT_Specific)) {
			modName = "FBETellerDataCenter/Bundles/PatchBundle";
			if (ReadPropertyFile.Version.startsWith("4.0"))
				sFileName = "BFBT";
			else
				sFileName = "Teller";
			//BranchTellerBranchServer
			//BranchTellerDataCentre
			String folderName = "";
			if (BT_Specific.equals("BTBS")) {
				folderName = ReadPropertyFile.BFT_Path + "/" + "Teller" + "_" + getPatchVersion() + buildNumber + "/BranchTellerBranchServer/PatchBundle";
				;
			}
			else {
				folderName = ReadPropertyFile.BFT_Path + "/" + "Teller" + "_" + getPatchVersion() + buildNumber + "/BranchTellerDataCentre/PatchBundle";
				;
			}
			//System.out.println(folderName);
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().startsWith(BT_Specific) && fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().startsWith(BT_Specific) && fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("Party")) {
			sFileName = "Party";
			modName = "FBEParty/Bundles/PatchBundle";
			;
			String folderName = ReadPropertyFile.PTY_Path + "/" + "Party" + "_" + ReadPropertyFile.Version + "." + ReadPropertyFile.ServicePack + "." + ReadPropertyFile.Patch + "." + +buildNumber + "/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		//}
		//else {
		/*
		if (moduleName.equals("BFP")) {
			modName = "FBP/Bundles/PatchBundle";
			if (ReadPropertyFile.Version.startsWith("4.0") || ReadPropertyFile.Version.startsWith("4.1"))
				sFileName = "BFP";
			else
				sFileName = "FBP";
			String ver = ReadPropertyFile.Version;
			String folderName = "";
			int len = ver.lastIndexOf(".");
			if (len != 1) {
				folderName = ReadPropertyFile.BFP_Path + "/" + sFileName + "_" + ReadPropertyFile.Version + ".0." + buildNumber + "/ConsolidatedPatchBundle/BFComplete/Bundles/BankFusion/ConsolidatedPatchBundle";
			}
			else if (len == 1) {
				folderName = ReadPropertyFile.BFP_Path + "/" + sFileName + "_" + ReadPropertyFile.Version + ".0.0." + buildNumber + "/ConsolidatedPatchBundle/BFComplete/Bundles/BankFusion/ConsolidatedPatchBundle";
			}
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("CBS")) {
			sFileName = "CBS";
			modName = "FBCBS/Bundles/PatchBundle";
			//For 4.1
			//sourcePatchFileName = "//misys.global.ad/bangalore/Dev/CMRE/CBS/DailyBuilds/CBS_4.1/DEV/CBS4.1_DEV_B" + buildNumber + "/CBS/PnP/PatchBundle/CBS_4.1.0." + buildNumber + ".bfj";
			//sourceKeyFileName = "//misys.global.ad/bangalore/Dev/CMRE/CBS/DailyBuilds/CBS_4.1/DEV/CBS4.1_DEV_B" + buildNumber + "/CBS/PnP/PatchBundle/CBS_4.1.0." + buildNumber + ".key";
			//For 4.2
			//sourcePatchFileName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/CBS/PnP/PatchBundle/CBS_" + ReadPropertyFile.Version + ".0." + buildNumber + ".bfj";
			//sourceKeyFileName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/CBS/PnP/PatchBundle/CBS_" + ReadPropertyFile.Version + ".0." + buildNumber + ".key";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/CBS/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFAO")) {
			sFileName = "BFAO";
			modName = "FBAO/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/AccountOwnership/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFAM")) {
			sFileName = "BFAM";
			modName = "FBAM/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/AccountManagement/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFPM")) {
			sFileName = "BFPM";
			modName = "FBPM/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/PaymentManagement/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("WIF")) {
			sFileName = "WIF";
			modName = "WIF/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.CBS_Path + "/CBS" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/WhatIf/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("UB")) {
			//System.out.println("UB");
			if (ReadPropertyFile.Version.startsWith("4.0"))
				sFileName = "UB";
			else
				sFileName = "FBE";
			modName = "FBEssence/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.UB_Path + "/" + sFileName + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("UBOF")) {
			//System.out.println("UBOF");
			if (ReadPropertyFile.Version.startsWith("4.0"))
				sFileName = "UB";
			else
				sFileName = "FBE";
			modName = "FBEssence/Bundles/PatchBundle";
			String folderName = ReadPropertyFile.UB_Path + "/" + sFileName + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/UBOffline/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("BFT")) {
			if (ReadPropertyFile.Version.startsWith("4.0"))
				sFileName = "BFBT";
			else
				sFileName = "Teller";
			modName = "FBETeller/Bundles/PatchBundle";
			String folderName = sourcePatchFileName =ReadPropertyFile.BFT_Path + "/" + sFileName + "_R" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if ((fn.getName().startsWith("Teller") || fn.getName().startsWith("BFT")) && fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if ((fn.getName().startsWith("Teller") || fn.getName().startsWith("BFT")) && fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		//TODO
		if (moduleName.equals(BT_Specific)) {
			modName = "FBETellerDataCenter/Bundles/PatchBundle";
			if (ReadPropertyFile.Version.startsWith("4.0"))
				sFileName = "BFBT";
			else
				sFileName = "Teller";
			String folderName = sourcePatchFileName= ReadPropertyFile.BFT_Path + "/" + sFileName + "_R" + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().startsWith(BT_Specific) && fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().startsWith(BT_Specific) && fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		if (moduleName.equals("Party")) {
			sFileName = "Party";
			modName = "FBEParty/Bundles/PatchBundle";
			;
			String folderName = ReadPropertyFile.PTY_Path + "/" + sFileName + ReadPropertyFile.Version + "_" + ReadPropertyFile.CodeLine + "_B" + buildNumber + "/Server/PnP/PatchBundle";
			File folder = new File(folderName);
			File fList[] = folder.listFiles();
			if (folder.exists()) {
				for (File fn : fList) {
					if (fn.getName().endsWith(".bfj")) {
						sourcePatchFile = fn;
						module.add(fn.getName());
					}
					else if (fn.getName().endsWith(".key")) {
						sourceKeyFile = fn;
					}
				}
				patchName = sourcePatchFile.getName();
				keyName = sourceKeyFile.getName();
			}
		}
		*/
		//}
		String destPatchFileName = Destination_Folder + "/" + modName + "/" + patchName;
		String destKeyFileName = Destination_Folder + "/" + modName + "/" + keyName;
		File sourcePatch = sourcePatchFile;
		File sourceKey = sourceKeyFile;
		File destPatch = new File(destPatchFileName);
		File destKey = new File(destKeyFileName);
		if (moduleName.equals("BFP")) {
			copyFile(sourcePatch, destPatch);
			copyFile(sourceKey, destKey);
		}
		else {
			copyFile(sourcePatch, destPatch);
			copyFile(sourceKey, destKey);
		}
	}

	private static void copyFile(File sourceFileName, File destFileName) throws IOException {
		if (sourceFileName != null && sourceFileName.getAbsolutePath() != null && !sourceFileName.getAbsolutePath().contains(".key"))
			LOGGER.info("Copying Bundle : " + sourceFileName);
		if (sourceFileName != null)
			FileUtils.copyFile(sourceFileName, destFileName);
	}

	private static String getPatchVersion() {
		return ReadPropertyFile.Version + "." + ReadPropertyFile.ServicePack + "." + ReadPropertyFile.Patch + ".";
	}
}
